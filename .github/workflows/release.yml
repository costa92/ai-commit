name: Release Binaries

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write # 需要此权限来创建 releases 和上传文件

env:
  CARGO_TERM_COLOR: always
  # OPENSSL_VERSION_MUSL: 1.1.1w # 使用 OpenSSL 1.1.1w 以兼容 musl 交叉编译
  # OPENSSL_BUILD_DIR_MUSL: ${{ github.workspace }}/openssl-musl-build # OpenSSL 安装目录

jobs:
  release:
    name: release ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            archive: zip
            os: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            archive: tar.gz tar.xz tar.zst
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            archive: zip
            os: macos-latest
          - target: aarch64-apple-darwin
            archive: zip
            os: macos-latest
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.7

      - name: Cache Cargo dependencies
        uses: actions/cache@v4 
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/ 
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-nocache
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-

      - name: Install MinGW for Windows cross-compilation
        if: matrix.target == 'x86_64-pc-windows-gnu' && runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      - name: Install cross
        if: matrix.target == 'x86_64-unknown-linux-musl' && runner.os == 'Linux'
        run: cargo install cross --force

      - name: Build with cross (musl)
        if: matrix.target == 'x86_64-unknown-linux-musl' && runner.os == 'Linux'
        run: cross build --release --target x86_64-unknown-linux-musl

      - name: Archive Linux musl binary
        if: matrix.target == 'x86_64-unknown-linux-musl' && runner.os == 'Linux'
        run: |
          cp target/x86_64-unknown-linux-musl/release/ai-commit ${{ github.workspace }}/ai-commit-${{ github.ref_name }}-x86_64-unknown-linux-musl
          tar -czf ${{ github.workspace }}/ai-commit-${{ github.ref_name }}-x86_64-unknown-linux-musl.tar.gz -C ${{ github.workspace }} ai-commit-${{ github.ref_name }}-x86_64-unknown-linux-musl

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1 # Reverted to @v1 for stability
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          profile: minimal 

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }}
        env:
          # For openssl-sys crate to find the custom OpenSSL
          ${{ matrix.target }}_OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          ${{ matrix.target }}_OPENSSL_STATIC: "1"

      - name: Prepare artifact name and path
        id: prep_artifact
        run: |
          ARTIFACT_BASE_NAME="ai-commit-${{ github.ref_name }}-${{ matrix.target }}"
          RELEASE_DIR="target/${{ matrix.target }}/release"
          EXECUTABLE_NAME="ai-commit" # Default executable name
          if [[ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]]; then
            EXECUTABLE_NAME="ai-commit.exe"
          fi
          
          # Construct full path to executable for checking
          FULL_EXECUTABLE_PATH="${RELEASE_DIR}/${EXECUTABLE_NAME}"

          echo "artifact_base_name=${ARTIFACT_BASE_NAME}" >> $GITHUB_OUTPUT
          echo "release_dir=${RELEASE_DIR}" >> $GITHUB_OUTPUT
          echo "executable_name=${EXECUTABLE_NAME}" >> $GITHUB_OUTPUT # Store just the name for archiving
          
          # Ensure the executable exists
          if [ ! -f "${FULL_EXECUTABLE_PATH}" ]; then
             echo "Error: Expected executable '${FULL_EXECUTABLE_PATH}' not found!"
             echo "Listing contents of '${RELEASE_DIR}':"
             ls -la ${RELEASE_DIR}/
             # Attempt to find 'ai-commit' if platform specific one (like .exe) wasn't found
             if [[ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]] && [ ! -f "${RELEASE_DIR}/ai-commit.exe" ] && [ -f "${RELEASE_DIR}/ai-commit" ]; then
                echo "Warning: Found 'ai-commit' instead of 'ai-commit.exe' for Windows. Using 'ai-commit'."
                echo "executable_name=ai-commit" >> $GITHUB_OUTPUT # Overwrite executable_name
             elif [ ! -f "${FULL_EXECUTABLE_PATH}" ] && [ -f "${RELEASE_DIR}/ai-commit" ]; then # Generic fallback if primary check failed
                echo "Warning: Main executable check failed but found '${RELEASE_DIR}/ai-commit'. Using it."
                echo "executable_name=ai-commit" >> $GITHUB_OUTPUT # Overwrite executable_name
             elif [ ! -f "${FULL_EXECUTABLE_PATH}" ]; then
                exit 1
             fi
          fi
        shell: bash

      - name: Create release archive
        id: create_archive
        run: |
          cd ${{ steps.prep_artifact.outputs.release_dir }}
          ARTIFACT_BASE_NAME="ai-commit-${{ github.ref_name }}-${{ matrix.target }}"
          FILES_TO_ARCHIVE="ai-commit*"
          CREATED_FILES_LIST=""
          if [[ "${{ matrix.archive }}" == *"zip"* ]]; then
            zip -r "${{ github.workspace }}/${ARTIFACT_BASE_NAME}.zip" $FILES_TO_ARCHIVE
            CREATED_FILES_LIST="${CREATED_FILES_LIST} ${ARTIFACT_BASE_NAME}.zip"
          fi
          if [[ "${{ matrix.archive }}" == *"tar.gz"* ]]; then
            tar -czf "${{ github.workspace }}/${ARTIFACT_BASE_NAME}.tar.gz" $FILES_TO_ARCHIVE
            CREATED_FILES_LIST="${CREATED_FILES_LIST} ${ARTIFACT_BASE_NAME}.tar.gz"
          fi
          if [[ "${{ matrix.archive }}" == *"tar.xz"* ]]; then
            tar -cJf "${{ github.workspace }}/${ARTIFACT_BASE_NAME}.tar.xz" $FILES_TO_ARCHIVE
            CREATED_FILES_LIST="${CREATED_FILES_LIST} ${ARTIFACT_BASE_NAME}.tar.xz"
          fi
          if [[ "${{ matrix.archive }}" == *"tar.zst"* ]]; then
            tar --zstd -cf "${{ github.workspace }}/${ARTIFACT_BASE_NAME}.tar.zst" $FILES_TO_ARCHIVE
            CREATED_FILES_LIST="${CREATED_FILES_LIST} ${ARTIFACT_BASE_NAME}.tar.zst"
          fi
          echo "paths=$(echo $CREATED_FILES_LIST | xargs)" >> $GITHUB_OUTPUT
        shell: bash

      - name: List workspace files for debug
        run: ls -lh ${{ github.workspace }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ steps.create_archive.outputs.paths }}
          fail_on_unmatched_files: true 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
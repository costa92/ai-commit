name: Release Binaries

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: release ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            archive: zip
            os: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            archive: tar.gz tar.xz tar.zst
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            archive: zip
            os: macos-latest
          - target: aarch64-apple-darwin
            archive: zip
            os: macos-latest
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-nocache
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-

      - name: Install MinGW for Windows cross-compilation
        if: matrix.target == 'x86_64-pc-windows-gnu' && runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      - name: Install musl-tools for musl target
        if: matrix.target == 'x86_64-unknown-linux-musl' && runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Install cross
        if: matrix.target == 'x86_64-unknown-linux-musl' && runner.os == 'Linux'
        run: cargo install cross --force

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      - name: Build binary with cross or cargo
        run: |
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
            cross build --release --target ${{ matrix.target }} --target-dir target
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        env:
          OPENSSL_STATIC: "1"
          OPENSSL_DIR: ${{ github.workspace }}/openssl-musl

      - name: Run tests
        if: matrix.target != 'x86_64-pc-windows-gnu'
        run: cargo test --release --target ${{ matrix.target }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Prepare artifact info
        id: prep
        run: |
          ARTIFACT_BASE_NAME="ai-commit-${{ github.ref_name }}-${{ matrix.target }}"
          RELEASE_DIR="target/${{ matrix.target }}/release"
          EXECUTABLE_NAME="ai-commit"
          [[ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]] && EXECUTABLE_NAME="ai-commit.exe"
          echo "artifact_base_name=${ARTIFACT_BASE_NAME}" >> $GITHUB_OUTPUT
          echo "release_dir=${RELEASE_DIR}" >> $GITHUB_OUTPUT
          echo "executable_name=${EXECUTABLE_NAME}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Ensure executable permission
        if: matrix.target != 'x86_64-pc-windows-gnu'
        run: chmod +x target/${{ matrix.target }}/release/ai-commit

      - name: Copy docs
        run: |
          cp README.md CHANGELOG.md target/${{ matrix.target }}/release/

      - name: Create release archives
        id: archive
        run: |
          cd ${{ steps.prep.outputs.release_dir }}
          ARTIFACT_BASE_NAME="${{ steps.prep.outputs.artifact_base_name }}"
          FILES="${{ steps.prep.outputs.executable_name }} README.md CHANGELOG.md"
          CREATED=""
          [[ "${{ matrix.archive }}" == *"zip"* ]] && zip -r "$ARTIFACT_BASE_NAME.zip" $FILES && CREATED="$CREATED $ARTIFACT_BASE_NAME.zip"
          [[ "${{ matrix.archive }}" == *"tar.gz"* ]] && tar -czf "$ARTIFACT_BASE_NAME.tar.gz" $FILES && CREATED="$CREATED $ARTIFACT_BASE_NAME.tar.gz"
          [[ "${{ matrix.archive }}" == *"tar.xz"* ]] && tar -cJf "$ARTIFACT_BASE_NAME.tar.xz" $FILES && CREATED="$CREATED $ARTIFACT_BASE_NAME.tar.xz"
          [[ "${{ matrix.archive }}" == *"tar.zst"* ]] && tar --zstd -cf "$ARTIFACT_BASE_NAME.tar.zst" $FILES && CREATED="$CREATED $ARTIFACT_BASE_NAME.tar.zst"
          for f in $CREATED; do mv "$f" "${{ github.workspace }}/$f"; done
          echo "paths=$(echo $CREATED_FILES_LIST | xargs | tr ' ' ',')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Debug artifact files
        run: |
          echo "Artifacts: ${{ steps.archive.outputs.paths }}"
          ls -lh ${{ github.workspace }}

      - name: Upload release artifacts
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          artifacts: ${{ steps.archive.outputs.paths }}
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate checksums
        run: |
          cd ${{ github.workspace }}
          if command -v sha256sum >/dev/null; then
            sha256sum ai-commit-*.* > ai-commit-SHA256SUMS.txt
          else
            shasum -a 256 ai-commit-*.* > ai-commit-SHA256SUMS.txt
          fi

      - name: Upload checksums
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          artifacts: ai-commit-SHA256SUMS.txt
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
